<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/10/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>react项目配置---全局axios及错误处理</title>
    <url>/2024/10/30/react%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE-%E5%85%A8%E5%B1%80axios%E5%8F%8A%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/utils/axios.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> handleErrors <span class="keyword">from</span> <span class="string">&quot;./handleError&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">REACT_APP_API_URL</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在请求前做些什么</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.<span class="property">headers</span>[<span class="string">&quot;Authorization&quot;</span>] = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//对响应数据做些什么</span></span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//对响应错误做些什么</span></span><br><span class="line">    <span class="title function_">handleErrors</span>(error); <span class="comment">// 使用普通函数处理错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/utils/handleError.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleErrors</span> = (<span class="params">error</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">response</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; status &#125; = error.<span class="property">response</span>;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> status &gt;= <span class="number">500</span> &amp;&amp; status &lt; <span class="number">600</span>:</span><br><span class="line">        message.<span class="title function_">error</span>(<span class="string">`服务器错误: <span class="subst">$&#123;status&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> status === <span class="number">403</span>:</span><br><span class="line">        message.<span class="title function_">error</span>(<span class="string">&quot;禁止访问: 403 Forbidden&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> status === <span class="number">404</span>:</span><br><span class="line">        message.<span class="title function_">error</span>(<span class="string">&quot;未找到: 404 Not Found&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        message.<span class="title function_">error</span>(<span class="string">`错误状态码: <span class="subst">$&#123;status&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">request</span>) &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&quot;请求发出, 网络错误&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&quot;请求错误: &quot;</span> + error.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> handleErrors;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>react</category>
        <category>项目配置</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序中bindtap和bindsync区别</title>
    <url>/2024/10/30/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%ADbindtap%E5%92%8Cbindsync%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="bindtap和bindsync区别"><a href="#bindtap和bindsync区别" class="headerlink" title="bindtap和bindsync区别"></a><strong>bindtap和bindsync区别</strong></h1><p>在小程序开发中，<code>bindsync</code> 和 <code>bindtap</code> 是两种常用的事件绑定方式，它们的用途和行为略有不同：</p>
<h3 id="1-bindtap"><a href="#1-bindtap" class="headerlink" title="1. bindtap"></a><strong>1. <code>bindtap</code></strong></h3><p><code>bindtap</code> 是用来监听用户的点击（或触摸）事件，等同于点击事件处理器。它用于捕捉用户的点击操作，并执行相应的回调函数。</p>
<h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a><strong>特点：</strong></h3><ul>
<li><code>bindtap</code> 是绑定点击事件的事件处理器。</li>
<li>点击元素时会触发这个事件，执行相应的逻辑。</li>
<li>常用于按钮、图片、文字等点击交互场景。</li>
</ul>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a><strong>示例：</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line">&lt;view bindtap=&quot;handleTap&quot;&gt;点击我&lt;/view&gt;</span><br><span class="line">javascript复制代码Page(&#123;</span><br><span class="line">  handleTap() &#123;</span><br><span class="line">    console.log(&#x27;你点击了这个元素&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="解析："><a href="#解析：" class="headerlink" title="解析："></a><strong>解析：</strong></h3><ul>
<li>当用户点击 <code>&lt;view&gt;</code> 元素时，<code>handleTap</code> 函数将被触发，打印出相应的内容。</li>
</ul>
<h3 id="捕获和冒泡："><a href="#捕获和冒泡：" class="headerlink" title="捕获和冒泡："></a><strong>捕获和冒泡：</strong></h3><ul>
<li><code>bindtap</code> 默认支持事件冒泡，也就是说，子元素的点击事件会向上冒泡到父元素。</li>
<li>如果不希望事件冒泡，可以使用 <code>catchtap</code>。</li>
</ul>
<hr>
<h3 id="2-bindsync"><a href="#2-bindsync" class="headerlink" title="2. bindsync"></a><strong>2. <code>bindsync</code></strong></h3><p><code>bindsync</code> 是专门用于 <strong>双向绑定</strong> 的属性，通常用于表单组件中，实现数据的实时同步更新。</p>
<h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a><strong>特点：</strong></h3><ul>
<li><code>bindsync</code> 是用于数据的双向绑定，能够实时同步用户输入和数据模型。</li>
<li>当用户在表单控件中输入或修改值时，数据会自动同步到绑定的数据源。</li>
<li>常见于表单组件，如 <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code> 等。</li>
</ul>
<h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a><strong>示例：</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line">&lt;input bindinput=&quot;onInputChange&quot; bindsync=&quot;value&quot; /&gt;</span><br><span class="line">javascript复制代码Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    value: &#x27;&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  onInputChange(e) &#123;</span><br><span class="line">    console.log(&#x27;当前输入框的值为：&#x27;, e.detail.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="解析：-1"><a href="#解析：-1" class="headerlink" title="解析："></a><strong>解析：</strong></h3><ul>
<li>用户在输入框中输入时，<code>value</code> 会与输入框的内容实时同步，且可以通过双向绑定的机制实时获取或更新数据。</li>
<li><code>bindsync</code> 使得在复杂表单中，数据与视图的绑定更加方便。</li>
</ul>
<hr>
<h3 id="3-区别总结"><a href="#3-区别总结" class="headerlink" title="3. 区别总结"></a><strong>3. 区别总结</strong></h3><ul>
<li>**<code>bindtap</code>**：是用于 <strong>单向绑定</strong> 点击事件的事件处理器。当用户点击某个元素时，触发回调逻辑。</li>
<li>**<code>bindsync</code>**：是用于 <strong>双向绑定</strong> 表单数据的绑定方式，可以实时同步数据源和视图的输入内容。</li>
</ul>
<h3 id="常见使用场景："><a href="#常见使用场景：" class="headerlink" title="常见使用场景："></a><strong>常见使用场景：</strong></h3><ul>
<li>**<code>bindtap</code>**：用户点击按钮、图片、文本时触发的操作（如导航、提交等）。</li>
<li>**<code>bindsync</code>**：表单中使用，保持数据的实时更新，例如输入框内容和页面数据保持同步。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序中的behaviors</title>
    <url>/2024/10/30/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84behaviors/</url>
    <content><![CDATA[<h1 id="behaviors"><a href="#behaviors" class="headerlink" title="behaviors"></a><strong>behaviors</strong></h1><p>在微信小程序开发中，<code>behaviors</code> 是一种类似于 <strong>“组件继承”</strong> 的机制，允许将公共的代码（如数据、方法、生命周期函数等）抽离到一个单独的模块，然后让多个组件或页面去复用这些代码。<code>behaviors</code> 类似于 React 中的 **<code>mixins</code>**，用于代码的复用和模块化。</p>
<h3 id="1-behaviors-的基本使用"><a href="#1-behaviors-的基本使用" class="headerlink" title="1. behaviors 的基本使用"></a><strong>1. <code>behaviors</code> 的基本使用</strong></h3><h3 id="定义-behavior"><a href="#定义-behavior" class="headerlink" title="定义 behavior"></a><strong>定义 <code>behavior</code></strong></h3><p>可以通过 <code>Behavior</code> 函数来定义一个 <code>behavior</code>，并且像组件一样，<code>behavior</code> 也可以包含 <code>data</code>、<code>methods</code>、生命周期函数等内容。</p>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a><strong>示例：</strong></h3><p>定义一个 <code>behavior</code>，包含共享的数据和方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript复制代码// 定义一个 behavior，放在 behaviors 文件夹下</span><br><span class="line">module.exports = Behavior(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    sharedData: &#x27;这是共享的数据&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sharedMethod() &#123;</span><br><span class="line">      console.log(&#x27;这是共享的方法&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  lifetimes: &#123;</span><br><span class="line">    attached() &#123;</span><br><span class="line">      console.log(&#x27;组件被附加时调用（behavior 内的生命周期函数）&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用这个 <code>behavior</code> 在某个组件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript复制代码// 在组件中引入 behavior</span><br><span class="line">const myBehavior = require(&#x27;/behaviors/myBehavior.js&#x27;);</span><br><span class="line"></span><br><span class="line">Component(&#123;</span><br><span class="line">  behaviors: [myBehavior],</span><br><span class="line">  data: &#123;</span><br><span class="line">    localData: &#x27;这是组件自身的数据&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    localMethod() &#123;</span><br><span class="line">      console.log(&#x27;这是组件自身的方法&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>myBehavior</code> 定义了 <code>sharedData</code> 和 <code>sharedMethod</code>，并且在组件中可以直接使用这些共享的内容。</p>
<h3 id="解析："><a href="#解析：" class="headerlink" title="解析："></a><strong>解析：</strong></h3><ul>
<li><code>behavior</code> 中的 <code>data</code> 和 <code>methods</code> 会被合并到使用它的组件中，组件可以直接使用这些属性和方法。</li>
<li><code>behavior</code> 的生命周期函数（如 <code>attached</code>）也会与组件的生命周期函数一起工作。</li>
</ul>
<h3 id="2-多-behaviors-的使用"><a href="#2-多-behaviors-的使用" class="headerlink" title="2. 多 behaviors 的使用"></a><strong>2. 多 <code>behaviors</code> 的使用</strong></h3><p>组件中可以混入多个 <code>behaviors</code>，这些 <code>behaviors</code> 会按照从左到右的顺序进行合并。</p>
<h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a><strong>示例：</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript复制代码const behaviorA = require(&#x27;/behaviors/behaviorA.js&#x27;);</span><br><span class="line">const behaviorB = require(&#x27;/behaviors/behaviorB.js&#x27;);</span><br><span class="line"></span><br><span class="line">Component(&#123;</span><br><span class="line">  behaviors: [behaviorA, behaviorB],</span><br><span class="line">  data: &#123;</span><br><span class="line">    componentData: &#x27;组件数据&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><ul>
<li>如果多个 <code>behavior</code> 中定义了相同的 <code>data</code> 字段或方法，后定义的 <code>behavior</code> 会覆盖之前的内容（从左到右合并）。</li>
<li>如果 <code>behavior</code> 和组件本身定义了相同的 <code>data</code> 字段或方法，组件本身的内容会覆盖 <code>behavior</code> 中的内容。</li>
</ul>
<h3 id="3-behavior-中的生命周期"><a href="#3-behavior-中的生命周期" class="headerlink" title="3. behavior 中的生命周期"></a><strong>3. <code>behavior</code> 中的生命周期</strong></h3><p><code>behavior</code> 和组件的生命周期函数是可以同时存在的。如果 <code>behavior</code> 和组件都定义了相同的生命周期函数，那么它们会依次执行。</p>
<h3 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a><strong>示例：</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript复制代码// 定义一个 behavior，含有生命周期函数</span><br><span class="line">const myBehavior = Behavior(&#123;</span><br><span class="line">  lifetimes: &#123;</span><br><span class="line">    attached() &#123;</span><br><span class="line">      console.log(&#x27;behavior 的 attached&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Component(&#123;</span><br><span class="line">  behaviors: [myBehavior],</span><br><span class="line">  lifetimes: &#123;</span><br><span class="line">    attached() &#123;</span><br><span class="line">      console.log(&#x27;组件的 attached&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a><strong>输出结果：</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arduino复制代码behavior 的 attached</span><br><span class="line">组件的 attached</span><br></pre></td></tr></table></figure>

<h3 id="解析：-1"><a href="#解析：-1" class="headerlink" title="解析："></a><strong>解析：</strong></h3><ul>
<li>先执行 <code>behavior</code> 中的 <code>attached</code>，再执行组件中的 <code>attached</code>。</li>
<li>如果在 <code>behavior</code> 和组件中定义了相同的生命周期函数，它们都会被依次调用。</li>
</ul>
<h3 id="4-behaviors-与组件属性的合并规则"><a href="#4-behaviors-与组件属性的合并规则" class="headerlink" title="4. behaviors 与组件属性的合并规则"></a><strong>4. <code>behaviors</code> 与组件属性的合并规则</strong></h3><ul>
<li><strong><code>data</code> 合并</strong>：<code>behavior</code> 和组件的 <code>data</code> 会合并成一个对象。如果有相同的字段名，组件的字段会覆盖 <code>behavior</code> 的字段。</li>
<li><strong><code>methods</code> 合并</strong>：<code>behavior</code> 和组件的 <code>methods</code> 会合并在一起，如果同名，组件的方法会覆盖 <code>behavior</code> 的方法。</li>
<li><strong><code>lifetimes</code> 合并</strong>：<code>behavior</code> 和组件的生命周期方法会依次调用，不会互相覆盖。</li>
</ul>
<h3 id="5-behavior-的应用场景"><a href="#5-behavior-的应用场景" class="headerlink" title="5. behavior 的应用场景"></a><strong>5. <code>behavior</code> 的应用场景</strong></h3><p><code>behaviors</code> 通常用于以下场景：</p>
<ul>
<li><strong>组件复用</strong>：当多个组件有相似的功能时，可以将公共的代码抽离出来放到 <code>behavior</code> 中，减少重复代码。</li>
<li><strong>数据共享</strong>：<code>behavior</code> 可以用于组件之间共享某些公共的数据或方法。</li>
<li><strong>生命周期逻辑复用</strong>：如果多个组件有相同的生命周期逻辑，可以通过 <code>behavior</code> 来统一管理。</li>
</ul>
<h3 id="6-示例：计数器-behavior"><a href="#6-示例：计数器-behavior" class="headerlink" title="6. 示例：计数器 behavior"></a><strong>6. 示例：计数器 <code>behavior</code></strong></h3><p>定义一个可以用于多个组件的计数器 <code>behavior</code>，包括计数器数据和增加计数的功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript复制代码// behaviors/counter.js</span><br><span class="line">module.exports = Behavior(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increaseCount() &#123;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        count: this.data.count + 1</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在两个不同的组件中使用这个 <code>behavior</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript复制代码// componentA.js</span><br><span class="line">const counterBehavior = require(&#x27;/behaviors/counter.js&#x27;);</span><br><span class="line"></span><br><span class="line">Component(&#123;</span><br><span class="line">  behaviors: [counterBehavior],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleTap() &#123;</span><br><span class="line">      this.increaseCount();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">javascript复制代码// componentB.js</span><br><span class="line">const counterBehavior = require(&#x27;/behaviors/counter.js&#x27;);</span><br><span class="line"></span><br><span class="line">Component(&#123;</span><br><span class="line">  behaviors: [counterBehavior],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleButtonClick() &#123;</span><br><span class="line">      this.increaseCount();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样，<code>componentA</code> 和 <code>componentB</code> 都拥有了计数功能，而无需重复代码。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p><code>behaviors</code> 是微信小程序中提供的一种复用代码的方式，可以将数据、方法、生命周期等共享逻辑抽离出来，实现组件之间的逻辑复用。通过 <code>behaviors</code>，可以让组件的开发更加模块化、简洁化，提高代码的复用性和维护性。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试web</title>
    <url>/2024/10/30/software-test/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>代码编辑器：idea</p>
<p>配置环境</p>
<p>在<code>xml</code>文件导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    Junit5单元测试框架--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-params<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span> 5.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    selenium自动化测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.141.59<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 请使用最新的版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    文件操作工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 请使用最新的版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h1><p>查看谷歌浏览器版本，下载对应版本的驱动（版本不必配会打不开浏览器）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="comment">//系统打开对应驱动，后面的引号为驱动在本地对应的位置</span></span><br><span class="line">   System.setProperty(<span class="string">&quot;webdriver.chrome.driver&quot;</span>, <span class="string">&quot;D:\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe&quot;</span>);</span><br><span class="line">        <span class="type">ChromeDriver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChromeDriver</span>();</span><br><span class="line">        <span class="comment">//用谷歌浏览器打开百度</span></span><br><span class="line">        driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="JUnit-单元测试"><a href="#JUnit-单元测试" class="headerlink" title="JUnit 单元测试"></a><strong>JUnit 单元测试</strong></h1><ol>
<li>**<code>@BeforeEach</code>**：<ul>
<li>这个注解用于标记在每个测试方法执行之前都要运行的方法。</li>
<li>通常用于设置测试环境，比如初始化测试数据、启动服务器、打开浏览器等。</li>
<li>可以有多个方法使用 <code>@BeforeEach</code> 注解，它们将按照定义的顺序执行。</li>
</ul>
</li>
<li>**<code>@AfterEach</code>**：<ul>
<li>这个注解用于标记在每个测试方法执行之后都要运行的方法。</li>
<li>通常用于清理测试环境，比如关闭数据库连接、停止服务器、关闭浏览器等。</li>
<li>也可以有多个方法使用 <code>@AfterEach</code> 注解，它们将按照定义的顺序执行。</li>
</ul>
</li>
<li>**<code>@Test</code>**：<ul>
<li>这个注解用于标记一个方法为测试方法。</li>
<li>测试运行器将执行所有标记有 <code>@Test</code> 注解的方法。</li>
<li>可以为 <code>@Test</code> 注解提供参数，如 <code>@Test(timeout = 100)</code> 来设置测试超时时间。</li>
</ul>
</li>
<li>**<code>@ParameterizedTest</code>**：<ul>
<li>这个注解用于标记一个参数化测试方法。</li>
<li>参数化测试允许你为同一个测试方法提供多组输入参数，这样可以在不同的输入条件下执行相同的测试逻辑。</li>
<li>通常与 <code>@ValueSource</code>、<code>@CsvSource</code>、<code>@MethodSource</code> 等注解一起使用来提供测试数据。</li>
</ul>
</li>
<li>**<code>@CsvSource</code>**：<ul>
<li><p>这个注解用于为 <code>@ParameterizedTest</code> 提供测试数据。</p>
</li>
<li><p>数据以逗号分隔的值（CSV）格式提供，每个条目代表一组参数。</p>
</li>
<li><p>例如：<code>@ParameterizedTest @CsvSource(&#123;&quot;value1, value2&quot;, &quot;value3, value4&quot;&#125;)</code>。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mooctest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.CsvSource;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.*;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> WebDriver driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;webdriver.chrome.driver&quot;</span>, <span class="string">&quot;D:\\\\chromedriver-win64\\\\chromedriver-win64\\\\chromedriver.exe&quot;</span>);</span><br><span class="line">        driver = <span class="keyword">new</span> <span class="title class_">ChromeDriver</span>();</span><br><span class="line">        driver.get(<span class="string">&quot;https://www.12306.cn/index/index.html&quot;</span>);</span><br><span class="line">        driver.manage().window().maximize();</span><br><span class="line">        driver.manage().timeouts().implicitlyWait(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请在这里插入JUnit5测试代码</span></span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@CsvSource(&#123;</span></span><br><span class="line"><span class="meta">        &quot;北京北,南京,2024-10-16,12306_search_001.jpg&quot;,</span></span><br><span class="line"><span class="meta">        &quot;北京北,南京,2024-10-24,12306_search_002.jpg&quot;,</span></span><br><span class="line"><span class="meta">        &quot;北京北,南京,2024-10-25,12306_search_003.jpg&quot;,</span></span><br><span class="line"><span class="meta">        &quot;北京北,南京,2024-10-31,12306_search_004.jpg&quot;,</span></span><br><span class="line"><span class="meta">        &quot;北京北,南京,2024-11-08,12306_search_005.jpg&quot;,</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">searchNormal</span><span class="params">(String from,String to,String date,String filename)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//        输入出发地</span></span><br><span class="line">    <span class="type">WebElement</span> <span class="variable">from_input</span> <span class="operator">=</span> driver.findElement(By.id(<span class="string">&quot;fromStationText&quot;</span>));</span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    from_input.clear();<span class="comment">//清空输入框</span></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    from_input.sendKeys(from+Keys.ENTER);</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">//        输入目的地</span></span><br><span class="line">    <span class="type">WebElement</span> <span class="variable">to_input</span> <span class="operator">=</span> driver.findElement(By.id(<span class="string">&quot;toStationText&quot;</span>));</span><br><span class="line">    to_input.clear();</span><br><span class="line">    to_input.sendKeys(to+Keys.ENTER);</span><br><span class="line"><span class="comment">//输入出发日期 合法出发日期下的早于当前日期车票的查询</span></span><br><span class="line">    <span class="type">WebElement</span> <span class="variable">train_date</span> <span class="operator">=</span> driver.findElement(By.id(<span class="string">&quot;train_date&quot;</span>));</span><br><span class="line">    train_date.clear();</span><br><span class="line">    train_date.sendKeys(date);</span><br><span class="line"><span class="comment">//点击查询</span></span><br><span class="line">    driver.findElement(By.id(<span class="string">&quot;search_one&quot;</span>)).click();</span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//        切换标签页</span></span><br><span class="line">    Set&lt;String&gt; windowHandles = driver.getWindowHandles();</span><br><span class="line">    driver.switchTo().window(windowHandles.toArray()[<span class="number">1</span>].toString());</span><br><span class="line"></span><br><span class="line">    takeScreenshot(filename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teardown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.driver.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">takeScreenshot</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">screenshotFile</span> <span class="operator">=</span> ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyFile(screenshotFile, <span class="keyword">new</span> <span class="title class_">File</span>(fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h1 id="自动化测试selenium常用函数"><a href="#自动化测试selenium常用函数" class="headerlink" title="自动化测试selenium常用函数"></a><strong>自动化测试selenium常用函数</strong></h1><h2 id="浏览器导航"><a href="#浏览器导航" class="headerlink" title="浏览器导航"></a><strong>浏览器导航</strong></h2><p>• 浏览器的前进、后退、刷新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver.navigate().back();</span><br><span class="line">driver.navigate().forward();</span><br><span class="line">driver.navigate().refresh();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>• 打开网站</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更⻓的⽅法</span></span><br><span class="line"> driver.navigate().to(<span class="string">&quot;https://selenium.dev&quot;</span>);</span><br><span class="line"> <span class="comment">// 简洁的⽅法</span></span><br><span class="line"> driver.get(<span class="string">&quot;https://selenium.dev&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li><p>在页面查找元素，返回值为Element</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">findElement(By);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在页面查找元素，返回值为List</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">findElements(By);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取css选择器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//id选择器</span></span><br><span class="line"><span class="type">WebElement</span> <span class="variable">kw_input</span> <span class="operator">=</span> driver.findElement(By.id(<span class="string">&quot;kw&quot;</span>));</span><br><span class="line"><span class="comment">//类名选择器</span></span><br><span class="line"> <span class="type">WebElement</span> <span class="variable">kw_input</span> <span class="operator">=</span> driver.findElement(By.className(<span class="string">&quot;kw&quot;</span>));</span><br><span class="line"> <span class="comment">//name</span></span><br><span class="line">  <span class="type">WebElement</span> <span class="variable">kw_input</span> <span class="operator">=</span> driver.findElement(By.name(<span class="string">&quot;kw&quot;</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>xpath路径</p>
</li>
</ul>
<h2 id="操作测试对象"><a href="#操作测试对象" class="headerlink" title="操作测试对象"></a><strong>操作测试对象</strong></h2><ol>
<li><p><code>click()</code> 点击&#x2F;提交对象</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//找到百度⼀下按钮并点击</span></span><br><span class="line">driver.findElement(By.cssSelector(<span class="string">&quot;#su&quot;</span>)).click();<span class="comment">//页面绝大多数区域都可以点击，不只是按钮，页面影藏的标签、不可见的标签不能点</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>sendKeys(&quot;&quot;)</code> 模拟按键输⼊</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver.findElement(By.cssSelector(<span class="string">&quot;#kw&quot;</span>)).sendKeys(<span class="string">&quot;输⼊⽂字&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>clear()</code> 清除文本内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver.findElement(By.cssSelector(<span class="string">&quot;#kw&quot;</span>)).sendKeys(<span class="string">&quot;我爱游戏&quot;</span>);</span><br><span class="line">driver.findElement(By.cssSelector(<span class="string">&quot;#kw&quot;</span>)).clear();</span><br><span class="line">driver.findElement(By.cssSelector(<span class="string">&quot;#kw&quot;</span>)).sendKeys(<span class="string">&quot;我爱学习&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>getText()</code> 获取文本信息</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">bdtext</span> <span class="operator">=</span> driver.findElement(By.xpath(<span class="string">&quot;//*[@id=&quot;</span>title-content<span class="string">&quot;]/span[1]&quot;</span>)).getText();</span><br><span class="line">System.out.println(<span class="string">&quot;打印的内容是：&quot;</span>+bdtext);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>getTitle()</code> 获取当前页面标题</p>
</li>
<li><p><code>getCurrentUrl()</code> 获取当前页面URL</p>
</li>
</ol>
<h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a><strong>窗口</strong></h2><h3 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a><strong>切换窗口</strong></h3><ul>
<li><p>获取当前页面句柄：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver.getWindowHandle(); <span class="comment">//返回值String</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取所有页面句柄：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver.getWindowHandles();<span class="comment">//返回值Set&lt;Sreing&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>切换当前句柄为最新页面：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">curWindow</span> <span class="operator">=</span> driver.getWindowHandle();</span><br><span class="line">Set&lt;String&gt; allWindow = driver.getWindowHandles();</span><br><span class="line"><span class="keyword">for</span>( String w : allWindow)&#123;</span><br><span class="line"><span class="keyword">if</span>(w!=curWindow)&#123;</span><br><span class="line">driver.switchTo().window(w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; windowHandles = driver.getWindowHandles();</span><br><span class="line">    driver.switchTo().window(windowHandles.toArray()[<span class="number">1</span>].toString());</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="窗口设置大小"><a href="#窗口设置大小" class="headerlink" title="窗口设置大小"></a><strong>窗口设置大小</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//窗⼝最⼤化</span></span><br><span class="line">driver.manage().window().maximize();</span><br><span class="line"><span class="comment">//窗⼝最⼩化</span></span><br><span class="line">driver.manage().window().minimize();</span><br><span class="line"><span class="comment">//全屏窗⼝</span></span><br><span class="line">driver.manage().window().fullscreen();</span><br><span class="line"><span class="comment">//⼿动设置窗⼝⼤⼩</span></span><br><span class="line">driver.manage().window().setSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">1024</span>, <span class="number">768</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="窗口切换"><a href="#窗口切换" class="headerlink" title="窗口切换"></a><strong>窗口切换</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取所有句柄</span></span><br><span class="line"><span class="comment">//获取当前停留⻚⾯句柄</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">curWindow</span> <span class="operator">=</span> driver.getWindowHandle();</span><br><span class="line"> Set&lt;String&gt; allWindow = driver.getWindowHandles();</span><br><span class="line"> <span class="keyword">for</span>( String w : allWindow)&#123;</span><br><span class="line"> <span class="keyword">if</span>(w!=curWindow)&#123;</span><br><span class="line"> driver.switchTo().window(w);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>自动化一般不会存在打开好多个标签页</p>
<h3 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a><strong>关闭窗口</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver.close();<span class="comment">//关闭当前标签页</span></span><br><span class="line"> 注意：窗⼝关闭后driver要重新定义</span><br><span class="line">     </span><br><span class="line">driver.quit(); <span class="comment">//关闭浏览器、释放driver对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">takeScreenshot</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">       <span class="type">File</span> <span class="variable">screenshotFile</span> <span class="operator">=</span> ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           FileUtils.copyFile(screenshotFile, <span class="keyword">new</span> <span class="title class_">File</span>(fileName));</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>需要的依赖为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 请使用最新的版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="等待"><a href="#等待" class="headerlink" title="等待"></a><strong>等待</strong></h2><p>假如写自动化代码出现了<code>NoSuchElement</code>错误</p>
<ul>
<li>第一步:在报错的代码前添加Thread. sleep(秒),设置的时间长一点</li>
<li>第二步:执行自动化,在自动化打开的页面里打开前端开发者工具,手动检查元素是否真的不存在</li>
</ul>
<ol>
<li>自动化打开的页面确实不存在该元素<ol>
<li>手动打开的页面和自动化打开的页面不一样(很可能是登陆和登录状态下页面不一样)</li>
<li>元素为动态元素</li>
</ol>
</li>
<li>自动化打开的页面确实存在该元素<ul>
<li>代码执行的速度比页面渲染的速度要快,页面还没渲染出来,程序已经开始找到了,导致元素没有找到解决办法 —- 添加等待</li>
</ul>
</li>
</ol>
<h3 id="强制等待"><a href="#强制等待" class="headerlink" title="强制等待"></a><strong>强制等待</strong></h3><ul>
<li><code>Thread.sleep（）</code><ul>
<li>优点：使用简单，调试的时候比较有效</li>
<li>缺点：影响运行效率，浪费大量的时间</li>
</ul>
</li>
</ul>
<h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a><strong>隐式等待</strong></h3><p>隐式等待是⼀种智能等待，他可以规定在查找元素时，在指定时间内不断查找元素。如果找到则代码继续执⾏，直到超时没找到元素才会报错。</p>
<ul>
<li><code>implicitlyWait（）</code> 参数：Duration类中提供的毫秒、秒、分钟等方法<ul>
<li>隐式等待作用域是整个脚本的所有元素</li>
<li>优点：智能等待，作用于全局</li>
<li>缺点：只能查找元素、每次查找元素都要等待</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//隐式等待1000毫秒</span></span><br><span class="line">driver.manage().timeouts().implicitlyWait(Duration.ofMillis(<span class="number">1000</span>));</span><br><span class="line"><span class="comment">//隐式等待5秒</span></span><br><span class="line">driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(<span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<h3 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a><strong>显示等待</strong></h3><p>显示等待也是⼀种智能等待，在指定超时时间范围内只要满⾜操作的条件就会继续执⾏后续代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">WebDriverWait</span>(driver, Duration.ofSeconds(<span class="number">3</span>)).until($express)</span><br></pre></td></tr></table></figure>

<ul>
<li>$press：涉及到<code>selenium.support.ui.ExpectedConditions</code>包下的<code>ExpectedConditions</code>类</li>
<li>返回值：boolean</li>
</ul>
<h3 id="ExpectedConditions预定义方法的一些示例："><a href="#ExpectedConditions预定义方法的一些示例：" class="headerlink" title="ExpectedConditions预定义方法的一些示例："></a><strong><code>ExpectedConditions</code>预定义方法的一些示例：</strong></h3><ul>
<li><code>elementToBeClickable(By locator)</code> ‒ 用于检查元素的期望是可见的并已启用，以便可以单击。</li>
<li><code>textToBe(Bylocator，String str)</code> - 检查元素。精确匹配</li>
<li><code>presenceOfElementLocated(Bylocator)</code> ‒ 检查页⾯的 <code>DOM</code> 上是否存在元素。</li>
<li><code>urlToBe(java.lang.String url)</code> ‒ 检查当前页面的 URL 是⼀个特定的 URL</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebDriverWait</span> <span class="variable">wait</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDriverWait</span>(driver,Duration.ofSeconds(<span class="number">10</span>));</span><br><span class="line"><span class="number">2</span> <span class="type">boolean</span> <span class="variable">ispass</span> <span class="operator">=</span> wait.until(ExpectedConditions.textToBe(By.cssSelector(<span class="string">&quot;#s-topleft &gt; a:nth-child(1)&quot;</span>), <span class="string">&quot;新闻&quot;</span>));</span><br><span class="line"> <span class="keyword">if</span>(ispass)&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;测试通过&quot;</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;测试失败&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>优点：显式等待是智能等待，可以⾃定义显⽰等待的条件，操作灵活</li>
<li>缺点：写法复杂、<em>只做用在当前条件上</em></li>
</ul>
<p><strong>问题：显示等待和隐式等待一起使用会怎么样？</strong></p>
<p>可能会导致不可预测的等待时间，谨慎使用</p>
<h2 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a><strong>弹窗</strong></h2><p><code>弹窗是在⻚⾯是找不到任何元素的，这种情况怎么处理？</code></p>
<p><code>使⽤selenium提供的Alert接⼝</code></p>
<h3 id="警告弹窗-确认弹窗"><a href="#警告弹窗-确认弹窗" class="headerlink" title="警告弹窗+确认弹窗"></a><strong>警告弹窗+确认弹窗</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//切换弹窗</span></span><br><span class="line"><span class="type">Alert</span> <span class="variable">alert</span> <span class="operator">=</span> driver.switchTo.alert();</span><br><span class="line"> <span class="comment">//确认</span></span><br><span class="line"> alert.accept()</span><br><span class="line"> <span class="comment">//取消</span></span><br><span class="line"> alert.dismiss()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="提示弹窗"><a href="#提示弹窗" class="headerlink" title="提示弹窗"></a><strong>提示弹窗</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Alert</span> <span class="variable">alert</span> <span class="operator">=</span> driver.switchTo.alert();</span><br><span class="line">alert.sendKeys(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">alert.accept();</span><br><span class="line">alert.dismiss();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a><strong>文件上传</strong></h2><p>点击文件上传的场景下会弹窗系统窗口，进行文件的选择。<code>selenium</code>无法识别非web的控件，上传文件窗口为系统自带，无法识别窗口元素但是可以使用<code>sendkeys</code>来上传指定路径的文件，达到的效果是⼀样的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebElement</span> <span class="variable">ele</span> <span class="operator">=</span> driver.findElement(By.cssSelector(<span class="string">&quot;body &gt; div &gt; div &gt; </span></span><br><span class="line"><span class="string">input[type=file]&quot;</span>));</span><br><span class="line"> ele.sendKeys(<span class="string">&quot;D:\\selenium2html\\selenium2html\\upload.html&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>比赛</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>软测</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序中pureDataPattern优化设置</title>
    <url>/2024/10/30/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%ADpureDataPattern%E4%BC%98%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="pureDataPattern优化设置"><a href="#pureDataPattern优化设置" class="headerlink" title="pureDataPattern优化设置"></a><strong><code>pureDataPattern</code>优化设置</strong></h1><h1 id="pureDataPattern"><a href="#pureDataPattern" class="headerlink" title="pureDataPattern"></a><strong><code>pureDataPattern</code></strong></h1><p><code>pureDataPattern</code> 是微信小程序的一项优化设置，旨在提高页面性能，特别是在数据频繁更新时。如果页面的数据变化不涉及与渲染相关的逻辑（例如更新纯粹的业务数据而不是视图），可以通过配置 <code>pureDataPattern</code> 来告知小程序引擎哪些数据不需要参与视图层的 diff（对比计算）。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a><strong>作用</strong></h3><p>通过 <code>pureDataPattern</code>，开发者可以声明某些数据字段为“纯数据”，这些字段的更新不会触发视图层的渲染过程，避免了不必要的性能开销。它主要用于减少数据变化导致的性能损耗，从而优化页面性能。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a><strong>使用场景</strong></h3><p>当某些数据是纯业务逻辑数据，更新时不影响页面视图渲染时，可以使用 <code>pureDataPattern</code>。例如，统计数据、缓存数据、后台任务中的状态等。</p>
<h3 id="如何配置"><a href="#如何配置" class="headerlink" title="如何配置"></a><strong>如何配置</strong></h3><p><code>pureDataPattern</code> 是通过在小程序的 <code>app.json</code>、<code>page.json</code> 或者 <code>component.json</code> 文件中配置的，通常针对页面或组件。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><p>以下是一个简单的 <code>page.json</code> 配置示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">json复制代码&#123;</span><br><span class="line">  &quot;usingComponents&quot;: &#123;&#125;,</span><br><span class="line">  &quot;pureDataPattern&quot;: &quot;^_&quot;  // 表示以 _ 开头的数据字段为纯数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在此配置中，<code>pureDataPattern</code> 表示所有以 <code>_</code> 开头的数据字段会被认为是纯数据，不会影响视图渲染。</p>
<h3 id="规则说明"><a href="#规则说明" class="headerlink" title="规则说明"></a><strong>规则说明</strong></h3><ul>
<li><code>pureDataPattern</code> 是一个正则表达式，用于匹配那些不参与视图渲染的数据字段。</li>
<li>当符合正则表达式的字段发生变化时，视图层将忽略这些字段的更新，从而避免视图层不必要的性能开销。</li>
</ul>
<h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a><strong>配置示例</strong></h3><p>如果我们在一个小程序页面的 <code>data</code> 中声明了以下数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript复制代码Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    _somePrivateData: 123,  // 不需要视图更新的数据</span><br><span class="line">    visibleData: &#x27;This is visible&#x27;  // 会影响视图的数据</span><br><span class="line">  &#125;,</span><br><span class="line">  // 数据更新时，只有 visibleData 会触发视图更新</span><br><span class="line">  updateData() &#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      _somePrivateData: Math.random(),</span><br><span class="line">      visibleData: &#x27;Updated visible data&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过配置 <code>pureDataPattern</code>，像 <code>_somePrivateData</code> 这样以 <code>_</code> 开头的数据更新时不会引起视图的重新渲染，而 <code>visibleData</code> 的更新会触发视图更新。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ul>
<li>纯数据字段的更新不会影响视图的重渲染，但如果需要该数据在视图中显示，必须确保它不符合 <code>pureDataPattern</code> 的规则。</li>
<li>使用 <code>pureDataPattern</code> 仅适用于特定场景，过度使用可能导致预期之外的行为，因为视图层无法感知到这些数据的变化。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p><code>pureDataPattern</code> 是微信小程序的一项性能优化机制，用于声明不影响视图渲染的纯数据字段。合理使用可以减少不必要的视图更新，从而提升性能，尤其在处理频繁的数据变化时非常有用。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序页面切换的本质</title>
    <url>/2024/10/30/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
    <content><![CDATA[<h1 id="小程序页面切换本质"><a href="#小程序页面切换本质" class="headerlink" title="小程序页面切换本质"></a><strong>小程序页面切换本质</strong></h1><p>在微信小程序中，页面切换的本质可以归结为 <strong>页面栈的管理</strong> 和 <strong>视图的重新渲染</strong>。微信小程序通过一个栈来管理用户的页面跳转，当用户在不同页面之间切换时，小程序会将每个页面的路由推入或弹出页面栈，从而实现页面切换。具体分为以下几个方面：</p>
<h2 id="1-页面栈管理"><a href="#1-页面栈管理" class="headerlink" title="1. 页面栈管理"></a><strong>1. 页面栈管理</strong></h2><p>小程序在内存中维护了一个页面栈来管理当前活动的页面和之前访问过的页面。页面栈可以理解为一个数据结构，其中栈底是最先加载的页面，栈顶是当前活动的页面。</p>
<h3 id="a-push-新页面到页面栈"><a href="#a-push-新页面到页面栈" class="headerlink" title="a. push 新页面到页面栈"></a><strong>a. push 新页面到页面栈</strong></h3><p>当用户从一个页面导航到另一个页面时（如通过 <code>wx.navigateTo</code>），新的页面会被推入到页面栈的顶部。旧页面仍然保留在栈中，等待用户返回时恢复。</p>
<h3 id="b-pop-出页面"><a href="#b-pop-出页面" class="headerlink" title="b. pop 出页面"></a><strong>b. pop 出页面</strong></h3><p>当用户通过 <code>wx.navigateBack</code> 返回上一个页面时，当前页面会从栈顶弹出，被销毁，之前的页面成为新的栈顶并重新渲染。</p>
<h3 id="c-replace-当前页面"><a href="#c-replace-当前页面" class="headerlink" title="c. replace 当前页面"></a><strong>c. replace 当前页面</strong></h3><p>通过 <code>wx.redirectTo</code>，当前页面会被替换，新的页面不会被推入页面栈，而是替换当前页面，这时页面栈的大小保持不变。</p>
<h3 id="d-重设页面栈"><a href="#d-重设页面栈" class="headerlink" title="d. 重设页面栈"></a><strong>d. 重设页面栈</strong></h3><p>通过 <code>wx.reLaunch</code>，可以清空页面栈并加载一个新的页面，这常用于重置应用或重新启动页面流程。</p>
<h2 id="2-页面栈管理API"><a href="#2-页面栈管理API" class="headerlink" title="2. 页面栈管理API"></a><strong>2. 页面栈管理API</strong></h2><ul>
<li>**<code>wx.navigateTo</code>**：在当前页面栈中打开一个新页面，保留当前页面。当栈中页面超过 10 个时，会自动销毁最早的页面。</li>
<li>**<code>wx.redirectTo</code>**：关闭当前页面，跳转到应用内的某个页面，不会产生页面栈推入操作。</li>
<li>**<code>wx.switchTab</code>**：切换到 tabBar 页面，关闭其他非 tabBar 页面。</li>
<li>**<code>wx.navigateBack</code>**：关闭当前页面，返回上一个页面或多级页面。</li>
<li>**<code>wx.reLaunch</code>**：关闭所有页面，打开一个新的页面，页面栈被完全重置。</li>
</ul>
<h2 id="3-视图的重新渲染"><a href="#3-视图的重新渲染" class="headerlink" title="3. 视图的重新渲染"></a><strong>3. 视图的重新渲染</strong></h2><p>每次页面切换时，新的页面加载并渲染，而旧页面在切换后可能被销毁或保留在内存中。</p>
<h3 id="a-生命周期函数"><a href="#a-生命周期函数" class="headerlink" title="a. 生命周期函数"></a><strong>a. 生命周期函数</strong></h3><p>小程序页面切换过程中，页面的生命周期函数会被触发，开发者可以在这些生命周期钩子中处理逻辑：</p>
<ul>
<li>**<code>onLoad</code>**：页面加载时调用，仅在页面首次加载时触发。</li>
<li>**<code>onShow</code>**：页面显示时调用，每次切换到该页面时触发。</li>
<li>**<code>onHide</code>**：页面隐藏时调用，如跳转到其他页面时会触发。</li>
<li>**<code>onUnload</code>**：页面卸载时调用，如页面被从页面栈中移除时触发。</li>
</ul>
<h3 id="b-缓存与销毁"><a href="#b-缓存与销毁" class="headerlink" title="b. 缓存与销毁"></a><strong>b. 缓存与销毁</strong></h3><p>如果页面栈中的页面没有被销毁，当用户返回该页面时，只会触发 <code>onShow</code>，而不会重新加载整个页面。这意味着页面的状态在页面栈中的保留时间取决于页面是否被销毁。</p>
<h2 id="4-性能考虑"><a href="#4-性能考虑" class="headerlink" title="4. 性能考虑"></a><strong>4. 性能考虑</strong></h2><p>微信小程序会对页面栈的数量进行限制（最多10个页面），以避免占用过多内存。当页面栈中的页面数量超过限制时，最早的页面会被销毁。因此，页面切换的本质不仅是栈的管理，还有内存和性能优化的考虑。</p>
<h2 id="5-与传统-Web-页面切换的区别"><a href="#5-与传统-Web-页面切换的区别" class="headerlink" title="5. 与传统 Web 页面切换的区别"></a><strong>5. 与传统 Web 页面切换的区别</strong></h2><p>与传统 Web 页面切换不同，微信小程序的页面切换并不会刷新整个应用程序，而是通过维护页面栈和局部更新视图来实现。这种模式使得页面切换更加轻量，不需要重新加载整个应用，提升了小程序的性能和用户体验。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>微信小程序页面切换的本质是通过 <strong>页面栈的管理</strong> 来完成的。不同的跳转方式（如 <code>navigateTo</code>、<code>redirectTo</code>、<code>reLaunch</code>）影响页面栈的行为，从而影响页面的加载与卸载。同时，页面的生命周期钩子提供了对页面状态的管理方式，确保视图在切换时得到适当的渲染和更新。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序的三大API</title>
    <url>/2024/10/30/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%89%E5%A4%A7API/</url>
    <content><![CDATA[<h1 id="小程序3大API"><a href="#小程序3大API" class="headerlink" title="小程序3大API"></a>小程序3大API</h1><p>微信小程序提供了三大类 API，涵盖了各种功能，帮助开发者实现业务需求。具体如下：</p>
<h3 id="1-界面-API（UI-APIs）"><a href="#1-界面-API（UI-APIs）" class="headerlink" title="1. 界面 API（UI APIs）"></a>1. <strong>界面 API（UI APIs）</strong></h3><p>这些 API 主要用于控制小程序的界面行为和视觉效果，如导航、交互反馈、菜单控制等。</p>
<p><strong>常用的界面 API 包括：</strong></p>
<ul>
<li><strong>导航栏相关</strong><ul>
<li><code>wx.setNavigationBarTitle</code>：设置当前页面的标题。</li>
<li><code>wx.setNavigationBarColor</code>：设置导航栏颜色。</li>
</ul>
</li>
<li><strong>界面交互</strong><ul>
<li><code>wx.showToast</code>：显示提示框，短暂提示用户某个操作成功或失败。</li>
<li><code>wx.showLoading</code>：显示加载中的提示框，常用于异步请求时提示用户等待。</li>
<li><code>wx.hideLoading</code>：隐藏 <code>wx.showLoading</code> 触发的加载框。</li>
<li><code>wx.showModal</code>：显示模态弹窗，提示用户确认或取消某个操作。</li>
<li><code>wx.showActionSheet</code>：显示操作菜单，允许用户从多个选项中选择。</li>
</ul>
</li>
<li><strong>导航控制</strong><ul>
<li><code>wx.navigateTo</code>：跳转到新页面，保留当前页面。</li>
<li><code>wx.redirectTo</code>：跳转到新页面，关闭当前页面。</li>
<li><code>wx.switchTab</code>：跳转到指定的 Tab 页面。</li>
<li><code>wx.navigateBack</code>：返回上一个页面，支持返回多级页面。</li>
<li><code>wx.reLaunch</code>：关闭所有页面并打开到指定页面。</li>
</ul>
</li>
<li><strong>下拉刷新</strong><ul>
<li><code>wx.startPullDownRefresh</code>：主动触发页面下拉刷新效果。</li>
<li><code>wx.stopPullDownRefresh</code>：停止当前页面的下拉刷新效果。</li>
</ul>
</li>
<li><strong>背景及菜单</strong><ul>
<li><code>wx.setBackgroundColor</code>：设置页面的背景颜色。</li>
<li><code>wx.setBackgroundTextStyle</code>：设置下拉刷新背景文字样式。</li>
<li><code>wx.showShareMenu</code>：显示分享按钮。</li>
<li><code>wx.hideShareMenu</code>：隐藏分享按钮。</li>
</ul>
</li>
</ul>
<p><strong>示例代码：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">javascript</span><br><span class="line">复制代码</span><br><span class="line">wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;操作成功&#x27;</span>,</span><br><span class="line">  <span class="attr">icon</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-数据-API（Data-APIs）"><a href="#2-数据-API（Data-APIs）" class="headerlink" title="2. 数据 API（Data APIs）"></a>2. <strong>数据 API（Data APIs）</strong></h3><p>数据 API 涵盖了获取和存储数据的功能，主要用于与后端服务器通信、缓存数据、本地存储等。</p>
<p><strong>常用的数据 API 包括：</strong></p>
<ul>
<li><strong>网络请求</strong><ul>
<li><code>wx.request</code>：发送 HTTP 请求，支持 GET、POST 等方法。</li>
<li><code>wx.uploadFile</code>：将本地文件上传到服务器。</li>
<li><code>wx.downloadFile</code>：从服务器下载文件。</li>
</ul>
</li>
<li><strong>WebSocket</strong><ul>
<li><code>wx.connectSocket</code>：创建 WebSocket 连接，用于实时通讯。</li>
<li><code>wx.onSocketOpen</code>：监听 WebSocket 连接打开事件。</li>
<li><code>wx.sendSocketMessage</code>：通过 WebSocket 发送消息。</li>
<li><code>wx.closeSocket</code>：关闭 WebSocket 连接。</li>
</ul>
</li>
<li><strong>文件系统</strong><ul>
<li><code>wx.getFileSystemManager</code>：获取文件系统管理器，用于管理文件读写操作。</li>
<li><code>wx.saveFile</code>：将文件保存到本地。</li>
<li><code>wx.getSavedFileList</code>：获取本地已保存的文件列表。</li>
</ul>
</li>
<li><strong>本地存储</strong><ul>
<li><code>wx.setStorageSync</code>：同步设置本地存储的数据。</li>
<li><code>wx.getStorageSync</code>：同步获取本地存储的数据。</li>
<li><code>wx.clearStorageSync</code>：清空本地存储的所有数据。</li>
</ul>
</li>
<li><strong>数据库</strong><ul>
<li>小程序还支持云开发，利用云数据库进行数据存储和查询。</li>
<li><code>wx.cloud.database</code>：获取云数据库的引用。</li>
<li><code>db.collection()</code>：获取云数据库中的集合。</li>
<li><code>collection.add()</code>：向集合中添加数据。</li>
<li><code>collection.get()</code>：从集合中查询数据。</li>
</ul>
</li>
</ul>
<p><strong>示例代码：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">javascript</span><br><span class="line">复制代码</span><br><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://api.example.com/data&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-设备-API（Device-APIs）"><a href="#3-设备-API（Device-APIs）" class="headerlink" title="3. 设备 API（Device APIs）"></a>3. <strong>设备 API（Device APIs）</strong></h3><p>设备 API 提供了与用户设备交互的功能，如系统信息、网络状态、蓝牙、Wi-Fi 等操作。</p>
<p><strong>常用的设备 API 包括：</strong></p>
<ul>
<li><strong>系统信息</strong><ul>
<li><code>wx.getSystemInfo</code>：获取设备系统信息，如屏幕尺寸、操作系统、微信版本等。</li>
<li><code>wx.getSystemInfoSync</code>：同步获取系统信息。</li>
</ul>
</li>
<li><strong>网络状态</strong><ul>
<li><code>wx.getNetworkType</code>：获取设备的网络类型（如 Wi-Fi、2G、3G、4G）。</li>
<li><code>wx.onNetworkStatusChange</code>：监听网络状态变化事件。</li>
</ul>
</li>
<li><strong>位置</strong><ul>
<li><code>wx.getLocation</code>：获取用户的当前位置，经纬度、速度等信息。</li>
<li><code>wx.chooseLocation</code>：打开地图选择位置。</li>
<li><code>wx.openLocation</code>：使用内置地图打开指定的地理位置。</li>
</ul>
</li>
<li><strong>蓝牙</strong><ul>
<li><code>wx.openBluetoothAdapter</code>：初始化蓝牙模块。</li>
<li><code>wx.startBluetoothDevicesDiscovery</code>：开始搜索附近的蓝牙设备。</li>
<li><code>wx.connectBLEDevice</code>：连接低功耗蓝牙设备。</li>
</ul>
</li>
<li><strong>Wi-Fi</strong><ul>
<li><code>wx.startWifi</code>：初始化 Wi-Fi 模块。</li>
<li><code>wx.getConnectedWifi</code>：获取当前连接的 Wi-Fi 信息。</li>
</ul>
</li>
<li><strong>电量</strong><ul>
<li><code>wx.getBatteryInfo</code>：获取设备电量信息。</li>
<li><code>wx.onBatteryInfoChange</code>：监听电量变化。</li>
</ul>
</li>
<li><strong>震动</strong><ul>
<li><code>wx.vibrateLong</code>：使手机发生长震动。</li>
<li><code>wx.vibrateShort</code>：使手机发生短震动。</li>
</ul>
</li>
<li><strong>扫码</strong><ul>
<li><code>wx.scanCode</code>：调用相机扫码功能，支持二维码和条形码。</li>
</ul>
</li>
</ul>
<p><strong>示例代码：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">javascript</span><br><span class="line">复制代码</span><br><span class="line">wx.<span class="title function_">getSystemInfo</span>(&#123;</span><br><span class="line">  <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">model</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">pixelRatio</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">windowWidth</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">windowHeight</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>微信小程序的三大类 API 提供了从界面控制、数据交互到设备访问的广泛功能支持。通过灵活运用这些 API，开发者可以实现小程序的各种功能，如页面导航、网络请求、系统状态获取等，构建功能强大且体验流畅的小程序应用。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序的九大组件</title>
    <url>/2024/10/30/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B9%9D%E5%A4%A7%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="官方定义的九大组件"><a href="#官方定义的九大组件" class="headerlink" title="官方定义的九大组件"></a>官方定义的九大组件</h1><p>微信小程序提供了丰富的基础组件，官方定义了九大类基础组件，帮助开发者快速构建功能丰富的用户界面。下面是这些组件的详细介绍：</p>
<h3 id="1-视图容器类组件（View-Components）"><a href="#1-视图容器类组件（View-Components）" class="headerlink" title="1. 视图容器类组件（View Components）"></a>1. <strong>视图容器类组件（View Components）</strong></h3><ul>
<li><strong>view</strong>：容器组件，类似于 HTML 中的 <code>&lt;div&gt;</code>，用于承载其他组件。<ul>
<li>属性：<code>hover-class</code>（点击时的样式）、<code>hover-stop-propagation</code>（阻止点击冒泡）等。</li>
<li>用途：布局和排版。</li>
</ul>
</li>
<li><strong>scroll-view</strong>：可滚动的视图区域，支持横向或纵向滚动。<ul>
<li>属性：<code>scroll-x</code>、<code>scroll-y</code> 控制滚动方向。</li>
<li>用途：实现长列表、图片滑动等功能。</li>
</ul>
</li>
<li><strong>swiper</strong>：滑块视图容器，允许在多个子元素之间滑动。<ul>
<li>属性：<code>autoplay</code>（自动播放）、<code>interval</code>（播放间隔）、<code>circular</code>（循环播放）。</li>
<li>用途：实现轮播图或幻灯片效果。</li>
</ul>
</li>
<li><strong>movable-view</strong> &amp; <strong>movable-area</strong>：用于创建可移动的视图组件，支持拖拽。<ul>
<li>用途：实现可拖拽的元素，例如地图上的标记或自定义拖动控件。</li>
</ul>
</li>
<li><strong>cover-view</strong> &amp; <strong>cover-image</strong>：用于在 <code>map</code> 或 <code>video</code> 等原生组件上覆盖自定义视图或图片。<ul>
<li>用途：在原生组件上叠加自定义内容。</li>
</ul>
</li>
</ul>
<h3 id="2-基础内容类组件（Basic-Content-Components）"><a href="#2-基础内容类组件（Basic-Content-Components）" class="headerlink" title="2. 基础内容类组件（Basic Content Components）"></a>2. <strong>基础内容类组件（Basic Content Components）</strong></h3><ul>
<li><strong>text</strong>：用于显示文本内容。<ul>
<li>属性：<code>selectable</code>（文本是否可选）。</li>
<li>用途：显示普通文字，支持文本样式设置。</li>
</ul>
</li>
<li><strong>rich-text</strong>：富文本解析组件，支持解析 HTML 标签。<ul>
<li>属性：<code>nodes</code>（要渲染的 HTML 结构）。</li>
<li>用途：显示复杂的富文本内容。</li>
</ul>
</li>
<li><strong>icon</strong>：图标组件，提供了一系列内置图标。<ul>
<li>属性：<code>type</code>（图标类型）、<code>size</code>（图标大小）、<code>color</code>（图标颜色）。</li>
<li>用途：常用于表示操作按钮或状态图标。</li>
</ul>
</li>
</ul>
<h3 id="3-表单类组件（Form-Components）"><a href="#3-表单类组件（Form-Components）" class="headerlink" title="3. 表单类组件（Form Components）"></a>3. <strong>表单类组件（Form Components）</strong></h3><ul>
<li><strong>button</strong>：按钮组件。<ul>
<li>属性：<code>type</code>（按钮类型：primary、warn、default）、<code>loading</code>（加载状态）。</li>
<li>用途：执行某种操作或提交表单。</li>
</ul>
</li>
<li><strong>checkbox</strong>：多选框组件，允许用户进行多项选择。<ul>
<li>属性：<code>value</code>（值）、<code>checked</code>（是否选中）。</li>
<li>用途：用户表单的多选操作。</li>
</ul>
</li>
<li><strong>form</strong>：表单容器，用于管理表单数据的提交。<ul>
<li>属性：<code>report-submit</code>（是否返回 formId）、<code>bindsubmit</code>（表单提交事件）。</li>
<li>用途：收集用户输入的数据并提交。</li>
</ul>
</li>
<li><strong>input</strong>：输入框组件，用于获取用户的文本输入。<ul>
<li>属性：<code>type</code>（文本、数字、密码等）、<code>placeholder</code>（占位符）。</li>
<li>用途：获取单行文本输入。</li>
</ul>
</li>
<li><strong>label</strong>：用于绑定控件的文本标签。<ul>
<li>用途：点击标签时，关联的表单控件会获得焦点。</li>
</ul>
</li>
<li><strong>picker</strong>：选择器组件，提供时间、日期、普通选择等功能。<ul>
<li>属性：<code>mode</code>（选择器类型：时间、日期、区域等）、<code>range</code>（数据源）。</li>
<li>用途：实现下拉选择功能。</li>
</ul>
</li>
<li><strong>radio</strong>：单选框组件，允许用户选择其中一个选项。<ul>
<li>属性：<code>value</code>（值）、<code>checked</code>（是否选中）。</li>
<li>用途：用户表单的单选操作。</li>
</ul>
</li>
<li><strong>slider</strong>：滑动选择器，用户可以通过拖动滑块来选择数值。<ul>
<li>属性：<code>min</code>、<code>max</code>（最小和最大值）、<code>step</code>（步长）。</li>
<li>用途：调整范围值，例如音量、亮度等。</li>
</ul>
</li>
<li><strong>switch</strong>：开关组件，用户可以切换状态。<ul>
<li>属性：<code>checked</code>（是否选中）。</li>
<li>用途：控制开关类操作。</li>
</ul>
</li>
<li><strong>textarea</strong>：多行文本输入框组件，用户可以输入长文本。<ul>
<li>属性：<code>maxlength</code>（最大长度）、<code>placeholder</code>（占位符）。</li>
<li>用途：用户输入多行文字。</li>
</ul>
</li>
</ul>
<h3 id="4-导航类组件（Navigation-Components）"><a href="#4-导航类组件（Navigation-Components）" class="headerlink" title="4. 导航类组件（Navigation Components）"></a>4. <strong>导航类组件（Navigation Components）</strong></h3><ul>
<li><strong>navigator</strong>：页面跳转组件，类似 HTML 的 <code>&lt;a&gt;</code> 标签，用于跳转到不同的页面。<ul>
<li>属性：<code>url</code>（目标页面的路径）、<code>open-type</code>（跳转方式）。</li>
<li>用途：实现页面间的导航。</li>
</ul>
</li>
</ul>
<h3 id="5-媒体组件（Media-Components）"><a href="#5-媒体组件（Media-Components）" class="headerlink" title="5. 媒体组件（Media Components）"></a>5. <strong>媒体组件（Media Components）</strong></h3><ul>
<li><strong>audio</strong>：音频播放组件。<ul>
<li>属性：<code>src</code>（音频文件路径）、<code>loop</code>（是否循环）、<code>controls</code>（是否显示控制栏）。</li>
<li>用途：用于播放音频文件。</li>
</ul>
</li>
<li><strong>image</strong>：图片组件，支持多种图片格式展示。<ul>
<li>属性：<code>src</code>（图片路径）、<code>mode</code>（图片裁剪、缩放模式）。</li>
<li>用途：用于显示图片，支持网络图片和本地图片。</li>
</ul>
</li>
<li><strong>video</strong>：视频播放组件。<ul>
<li>属性：<code>src</code>（视频文件路径）、<code>controls</code>（是否显示控制栏）、<code>autoplay</code>（自动播放）。</li>
<li>用途：播放视频内容。</li>
</ul>
</li>
<li><strong>camera</strong>：相机组件，允许用户拍照或录制视频。<ul>
<li>用途：拍摄照片或视频内容，常用于拍摄功能。</li>
</ul>
</li>
<li><strong>live-player</strong> 和 <strong>live-pusher</strong>：用于直播的推流和播放组件。<ul>
<li>用途：实现实时音视频推流和播放功能。</li>
</ul>
</li>
</ul>
<h3 id="6-地图类组件（Map-Components）"><a href="#6-地图类组件（Map-Components）" class="headerlink" title="6. 地图类组件（Map Components）"></a>6. <strong>地图类组件（Map Components）</strong></h3><ul>
<li><strong>map</strong>：地图组件，显示地图视图，支持标记、定位等功能。<ul>
<li>属性：<code>latitude</code>（纬度）、<code>longitude</code>（经度）、<code>markers</code>（标记点）。</li>
<li>用途：实现地理位置展示和标记功能。</li>
</ul>
</li>
</ul>
<h3 id="7-画布类组件（Canvas-Components）"><a href="#7-画布类组件（Canvas-Components）" class="headerlink" title="7. 画布类组件（Canvas Components）"></a>7. <strong>画布类组件（Canvas Components）</strong></h3><ul>
<li><strong>canvas</strong>：画布组件，允许在页面上绘制图形。<ul>
<li>属性：<code>canvas-id</code>（画布 ID）。</li>
<li>用途：绘制图像、图形，常用于自定义图形绘制。</li>
</ul>
</li>
</ul>
<h3 id="8-开放能力组件（Open-Capability-Components）"><a href="#8-开放能力组件（Open-Capability-Components）" class="headerlink" title="8. 开放能力组件（Open Capability Components）"></a>8. <strong>开放能力组件（Open Capability Components）</strong></h3><ul>
<li><strong>open-data</strong>：用于展示微信开放的数据，如昵称、头像等。<ul>
<li>用途：展示用户的微信信息。</li>
</ul>
</li>
<li><strong>web-view</strong>：用于嵌入网页内容。<ul>
<li>用途：在小程序内显示网页，支持与 H5 页面交互。</li>
</ul>
</li>
</ul>
<h3 id="9-导航栏组件（Navigation-Bar-Components）"><a href="#9-导航栏组件（Navigation-Bar-Components）" class="headerlink" title="9. 导航栏组件（Navigation Bar Components）"></a>9. <strong>导航栏组件（Navigation Bar Components）</strong></h3><ul>
<li><strong>navigation-bar</strong>：用于配置页面的导航栏样式和行为。<ul>
<li>属性：<code>title</code>（页面标题）、<code>background-color</code>（导航栏背景色）。</li>
<li>用途：配置页面的顶部导航条。</li>
</ul>
</li>
</ul>
<hr>
<p>这些组件涵盖了微信小程序开发中的常见需求，提供了视图、表单、媒体、导航等各种功能，开发者可以根据具体业务场景灵活使用这些组件构建小程序。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序项目配置---全局request及错误处理</title>
    <url>/2024/10/30/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE-%E5%85%A8%E5%B1%80request%E5%8F%8A%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="keyword">import</span> handleErrors <span class="keyword">from</span> <span class="string">&#x27;./handleErrors&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&#x27;http://117.72.95.156:8080/api&#x27;</span>; <span class="comment">// 基础 URL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// console.log(options);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求拦截器</span></span><br><span class="line">    <span class="keyword">const</span> token = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      options.<span class="property">header</span> = &#123;</span><br><span class="line">        ...options.<span class="property">header</span>,</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置完整的 URL</span></span><br><span class="line">    <span class="comment">// options.url = baseURL + (endpoints[options.endpoint] || options.endpoint);</span></span><br><span class="line">    options.<span class="property">url</span> = baseURL + options.<span class="property">endpoint</span>;</span><br><span class="line">    options.<span class="property">timeout</span>=options.<span class="property">timeout</span>||<span class="number">5000</span>;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      ...options,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 响应拦截器</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">statusCode</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">handleErrors</span>(res); <span class="comment">// 处理错误</span></span><br><span class="line">          <span class="title function_">reject</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">handleErrors</span>(error); <span class="comment">// 处理请求错误</span></span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  request,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// handleErrors.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Notify</span> <span class="keyword">from</span> <span class="string">&#x27;../miniprogram_npm/@vant/weapp/notify/notify&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleErrors</span> = (<span class="params">error</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; status &#125; = error.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">// console.log(status);</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> status &gt;= <span class="number">500</span> &amp;&amp; status &lt; <span class="number">600</span>:</span><br><span class="line">        <span class="title class_">Notify</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>:<span class="string">`服务器错误: <span class="subst">$&#123;status&#125;</span>`</span>,</span><br><span class="line">          <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// wx.showToast(&#123;</span></span><br><span class="line">        <span class="comment">//   title: `服务器错误: $&#123;status&#125;`,</span></span><br><span class="line">        <span class="comment">//   icon: &#x27;error&#x27;,</span></span><br><span class="line">        <span class="comment">//   duration: 2000</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> status === <span class="number">403</span>:</span><br><span class="line">        <span class="title class_">Notify</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>:<span class="string">&quot;禁止访问: 403 Forbidden&quot;</span>,</span><br><span class="line">          <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// wx.showToast(&#123;</span></span><br><span class="line">        <span class="comment">//   title: &quot;禁止访问: 403 Forbidden&quot;,</span></span><br><span class="line">        <span class="comment">//   icon: &#x27;error&#x27;,</span></span><br><span class="line">        <span class="comment">//   duration: 2000</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> status === <span class="number">404</span>:</span><br><span class="line">        <span class="title class_">Notify</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>:<span class="string">&quot;未找到: 404 Not Found&quot;</span>,</span><br><span class="line">          <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// wx.showToast(&#123;</span></span><br><span class="line">        <span class="comment">//   title: &quot;未找到: 404 Not Found&quot;,</span></span><br><span class="line">        <span class="comment">//   icon: &#x27;error&#x27;,</span></span><br><span class="line">        <span class="comment">//   duration: 2000</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="title class_">Notify</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">`错误状态码: <span class="subst">$&#123;status&#125;</span>`</span>,</span><br><span class="line">          <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// wx.showToast(&#123;</span></span><br><span class="line">        <span class="comment">//   title: `错误状态码: $&#123;status&#125;`,</span></span><br><span class="line">        <span class="comment">//   icon: &#x27;error&#x27;,</span></span><br><span class="line">        <span class="comment">//   duration: 2000</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">request</span>) &#123;</span><br><span class="line">    <span class="title class_">Notify</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;请求发出, 网络错误&quot;</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// wx.showToast(&#123;</span></span><br><span class="line">    <span class="comment">//   title: &quot;请求发出, 网络错误&quot;,</span></span><br><span class="line">    <span class="comment">//   icon: &#x27;error&#x27;,</span></span><br><span class="line">    <span class="comment">//   duration: 2000</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">Notify</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;请求错误: &quot;</span> + error.<span class="property">errMsg</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// wx.showToast(&#123;</span></span><br><span class="line">    <span class="comment">//   title: &quot;请求错误: &quot; + error.errMsg,</span></span><br><span class="line">    <span class="comment">//   icon: &#x27;error&#x27;,</span></span><br><span class="line">    <span class="comment">//   duration: 2000</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> handleErrors;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>小程序</category>
        <category>项目配置</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序项目配置---全局websocket</title>
    <url>/2024/10/30/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE-%E5%85%A8%E5%B1%80websocket/</url>
    <content><![CDATA[<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//websocket.js</span></span><br><span class="line"><span class="keyword">let</span> socket = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> listeners = [];</span><br><span class="line"><span class="keyword">let</span> heartbeatInterval = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HEARTBEAT_INTERVAL</span> = <span class="number">10000</span>; <span class="comment">// 10秒心跳间隔</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">WEB_SOCKET_URL</span> = <span class="string">&#x27;ws://117.72.95.156:8080/ws&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connectWebSocket</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(socket&amp;&amp; socket.<span class="property">readyState</span> === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket已连接,无需重连&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> connectUrl=<span class="string">`<span class="subst">$&#123;WEB_SOCKET_URL&#125;</span>/<span class="subst">$&#123;url&#125;</span>`</span></span><br><span class="line">  socket = wx.<span class="title function_">connectSocket</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: connectUrl <span class="comment">// 确保这里是 url: connectUrl</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(socket)&#123;</span><br><span class="line">    socket.<span class="title function_">onOpen</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接已打开&#x27;</span>);</span><br><span class="line">      <span class="title function_">startHeartbeat</span>(); <span class="comment">// 连接成功后启动心跳</span></span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    socket.<span class="title function_">onMessage</span>(<span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;收到原始消息:&#x27;, message);</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 确保消息是字符串格式</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> message.<span class="property">data</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> parsedData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(message.<span class="property">data</span>);</span><br><span class="line">          <span class="keyword">if</span>(parsedData.<span class="property">event</span>===<span class="string">&#x27;heartbeat&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">// console.log(&quot;收到心跳消息&quot;);</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 处理解析后的数据</span></span><br><span class="line">          listeners.<span class="title function_">forEach</span>(<span class="function"><span class="params">listener</span> =&gt;</span> <span class="title function_">listener</span>(parsedData));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;接收到的消息不是字符串格式&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重置心跳</span></span><br><span class="line">        <span class="title function_">resetHeartbeat</span>();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// console.error(&#x27;JSON parsing error:&#x27;, error);</span></span><br><span class="line">        <span class="comment">// 处理解析错误</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    socket.<span class="title function_">onError</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;WebSocket错误:&#x27;</span>, error);</span><br><span class="line">      <span class="comment">// 可能需要通知用户连接错误</span></span><br><span class="line">      wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;WebSocket连接失败&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    socket.<span class="title function_">onClose</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接已关闭&#x27;</span>);</span><br><span class="line">      <span class="title function_">stopHeartbeat</span>(); <span class="comment">// 关闭时停止心跳</span></span><br><span class="line">      <span class="comment">// 可能需要重新连接或通知用户</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">disconnectWebSocket</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (socket) &#123;</span><br><span class="line">    socket.<span class="title function_">close</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接已断开&#x27;</span>);</span><br><span class="line">    <span class="title function_">stopHeartbeat</span>(); <span class="comment">// 停止心跳</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendMessage</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (socket &amp;&amp; socket.<span class="property">readyState</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    socket.<span class="title function_">send</span>(&#123; <span class="attr">data</span>: msg &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;WebSocket未连接&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">registerMessageListener</span>(<span class="params">listener</span>) &#123;</span><br><span class="line">  listeners.<span class="title function_">push</span>(listener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unregisterMessageListener</span>(<span class="params">listener</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> index = listeners.<span class="title function_">indexOf</span>(listener);</span><br><span class="line">  <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    listeners.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  heartbeatInterval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">sendMessage</span>(<span class="string">&#x27;ping&#x27;</span>); <span class="comment">// 发送心跳消息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送心跳: ping&#x27;</span>);</span><br><span class="line">  &#125;, <span class="variable constant_">HEARTBEAT_INTERVAL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resetHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (heartbeatInterval) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(heartbeatInterval); <span class="comment">// 清除当前心跳定时器</span></span><br><span class="line">    <span class="title function_">startHeartbeat</span>(); <span class="comment">// 重新启动心跳</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stopHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (heartbeatInterval) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(heartbeatInterval); <span class="comment">// 停止心跳</span></span><br><span class="line">    heartbeatInterval = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; connectWebSocket, sendMessage, registerMessageListener,unregisterMessageListener, disconnectWebSocket &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>小程序</category>
        <category>项目配置</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
</search>
